generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  searchQueries SearchQuery[]
  searchResults SearchResult[]
  teamMembers   TeamMember[]
  ownedTeams    Team[]         @relation("TeamOwner")

  @@map("users")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  ownerId     String       @map("owner_id")
  members     TeamMember[]
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String   @map("team_id")
  userId   String   @map("user_id")
  role     String   @default("member")
  joinedAt DateTime @default(now()) @map("joined_at")
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model SearchQuery {
  id        String         @id @default(cuid())
  userId    String         @map("user_id")
  query     String
  filters   Json?
  metadata  Json?
  createdAt DateTime       @default(now()) @map("created_at")
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  results   SearchResult[]

  @@index([userId, createdAt])
  @@index([createdAt])
  @@map("search_queries")
}

model SearchResult {
  id            String      @id @default(cuid())
  queryId       String      @map("query_id")
  userId        String      @map("user_id")
  threadId      String?     @map("thread_id")
  title         String
  content       String
  score         Float?
  resultType    String?     @map("result_type")
  sequence      Int?
  metadata      Json?
  sourceService String      @default("ira") @map("source_service")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  query         SearchQuery @relation(fields: [queryId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([threadId])
  @@map("search_results")
}
